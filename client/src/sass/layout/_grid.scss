@use '../util' as *;
@use 'sass:math';
$opacity: (
  '0': 0,
  '1': 0.1,
  '2': 0.2,
  '3': 0.3,
  '4': 0.4,
  '5': 0.5,
  '6': 0.6,
  '7': 0.7,
  '8': 0.8,
  '9': 0.9,
  '10': 1,
);
$grid-columns: 12;
$grid-gaps: (
  '0': 0,
  '1': 10px,
  '2': 20px,
  '3': 30px,
  '4': 40px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;
$align-items: stretch, center, flex-start, flex-end, baseline, initial, inherit;

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

//align item classes
@each $val in $align-items {
  .align-items-#{$val} {
    align-items: $val;
  }
}
@each $key, $value in $opacity {
  .opacity-#{$key} {
    opacity: $value;
  }
}
.d-flex {
  display: flex;
}
.row {
  display: flex;
  flex-flow: row wrap;
}
// container
.container {
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
@include breakpoints-min(xs) {
  @each $size, $value in $container {
    .container-#{$size} {
      width: 100%;
      max-width: $value;
      margin: 0 auto;
      padding: 0 20px;
      box-sizing: border-box;
    }
  }
}
@include breakpoints-min(sm) {
  @each $size, $value in $container {
    .container-#{$size} {
      width: 100%;
      max-width: $value;
      margin: 0 auto;
      padding: 0 20px;
      box-sizing: border-box;
    }
  }
}
@include breakpoints-min(md) {
  @each $size, $value in $container {
    .container-#{$size} {
      width: 100%;
      max-width: $value;
      margin: 0 auto;
      padding: 0 20px;
      box-sizing: border-box;
    }
  }
}
@include breakpoints-min(lg) {
  @each $size, $value in $container {
    .container-#{$size} {
      width: 100%;
      max-width: $value;
      margin: 0 auto;
      padding: 0 20px;
      box-sizing: border-box;
    }
  }
}
@include breakpoints-min(xl) {
  @each $size, $value in $container {
    .container-#{$size} {
      width: 100%;
      max-width: $value;
      margin: 0 auto;
      padding: 0 20px;
      box-sizing: border-box;
    }
  }
}

//grid gaps
@each $key, $value in $grid-gaps {
  .gap-#{$key} > * {
    padding: $value;
  }
  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

//col classes
@include breakpoints-max(xs) {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include breakpoints-min(xs) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include breakpoints-min(sm) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include breakpoints-min(md) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include breakpoints-min(lg) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include breakpoints-min(xl) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
